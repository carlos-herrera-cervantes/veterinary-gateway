http:
  port: ${HTTP_PORT}
admin:
  port: ${ADMIN_PORT}
  host: ${ADMIN_HOST}
apiEndpoints:
  api:
    host: ${API_HOST}
    paths: '/ip'

  # INTERNAL REGION
  internalAuthorizer:
    host: ${INTERNAL_HOST}
    paths:
      - ${AUTHORIZER_BASE_PATH_V1}/sign-out

  internalCustomer:
    host: ${INTERNAL_HOST}
    paths:
      - ${CUSTOMER_BASE_PATH_V1}/profiles/me
      - ${CUSTOMER_BASE_PATH_V1}/address
      - ${CUSTOMER_BASE_PATH_V1}/address/me
      - ${CUSTOMER_BASE_PATH_V1}/avatar
      - ${CUSTOMER_BASE_PATH_V1}/avatar/me

  internalEmployee:
    host: ${INTERNAL_HOST}
    paths:
      - ${EMPLOYEE_BASE_PATH_V1}/profiles/me
      - ${EMPLOYEE_BASE_PATH_V1}/address
      - ${EMPLOYEE_BASE_PATH_V1}/address/me
      - ${EMPLOYEE_BASE_PATH_V1}/avatar
      - ${EMPLOYEE_BASE_PATH_V1}/avatar/:id
      - ${EMPLOYEE_BASE_PATH_V1}/avatar/me

  internalPet:
    host: ${INTERNAL_HOST}
    paths:
      - ${PET_BASE_PATH_V1}/classifications
      - ${PET_BASE_PATH_V1}/profiles/me
      - ${PET_BASE_PATH_V1}/classifications/:id/races
      - ${PET_BASE_PATH_V1}/:id/allergies
      - ${PET_BASE_PATH_V1}/:id/avatar
      - ${PET_BASE_PATH_V1}/:classification_id/allergies/:allergy_id

  internalServices:
    host: ${INTERNAL_HOST}
    paths:
      - ${SERVICES_BASE_PATH_V1}/costs
      - ${SERVICES_BASE_PATH_V1}/costs/:id
      - ${SERVICES_BASE_PATH_V1}/customers/me
      - ${SERVICES_BASE_PATH_V1}/customers/me/:id
      - ${SERVICES_BASE_PATH_V1}/customers/me/:id/cancel
      - ${SERVICES_BASE_PATH_V1}/costs/total

  internalPayments:
    host: ${INTERNAL_HOST}
    paths:
      - ${PAYMENTS_BASE_PATH_V1}/bank-accounts/me
      - ${PAYMENTS_BASE_PATH_V1}/cards/me
      - ${PAYMENTS_BASE_PATH_V1}/cards/me/:id
      - ${PAYMENTS_BASE_PATH_V1}/devolutions/me
      - ${PAYMENTS_BASE_PATH_V1}/devolutions/me
      - ${PAYMENTS_BASE_PATH_V1}/devolutions/me/:id
      - ${PAYMENTS_BASE_PATH_V1}/methods
      - ${PAYMENTS_BASE_PATH_V1}/methods/:id
  
  # PUBLIC REGION
  publicAuthorizer:
    host: ${INTERNAL_HOST}
    paths:
      - ${AUTHORIZER_BASE_PATH_V1}/sign-in
      - ${AUTHORIZER_BASE_PATH_V1}/customers

  # PRIVATE REGION
  privateAuthorizer:
    host: ${INTERNAL_HOST}
    paths:
      - ${AUTHORIZER_BASE_PATH_V1}/sign-up/employees
      - ${AUTHORIZER_BASE_PATH_V1}/account/lock

  privateCustomer:
    host: ${INTERNAL_HOST}
    paths:
      - ${CUSTOMER_BASE_PATH_V1}/profiles
      - ${CUSTOMER_BASE_PATH_V1}/profiles/:id

  privateEmployee:
    host: ${INTERNAL_HOST}
    paths:
      - ${EMPLOYEE_BASE_PATH_V1}/profiles
      - ${EMPLOYEE_BASE_PATH_V1}/profiles/:id
      - ${EMPLOYEE_BASE_PATH_V1}/roles
      - ${EMPLOYEE_BASE_PATH_V1}/roles/:id

  privateServices:
    host: ${INTERNAL_HOST}
    paths:
      - ${SERVICES_BASE_PATH_V1}/catalog
      - ${SERVICES_BASE_PATH_V1}/catalog/:id
      - ${SERVICES_BASE_PATH_V1}/customers
      - ${SERVICES_BASE_PATH_V1}/customers/:id
      - ${SERVICES_BASE_PATH_V1}/customers/:id/employee

  privatePet:
    host: ${INTERNAL_HOST}
    paths:
      - ${PET_BASE_PATH_V1}/profiles
      - ${PET_BASE_PATH_V1}/profiles/:id
      - ${PET_BASE_PATH_V1}/classifications/:classification_id/races/:race_id
      - ${PET_BASE_PATH_V1}/classifications/:id

  privatePayments:
    host: ${INTERNAL_HOST}
    paths:
      - ${PAYMENTS_BASE_PATH_V1}/bank-accounts
      - ${PAYMENTS_BASE_PATH_V1}/bank-accounts/:id
      - ${PAYMENTS_BASE_PATH_V1}/cards
      - ${PAYMENTS_BASE_PATH_V1}/cards/:id
      - ${PAYMENTS_BASE_PATH_V1}/devolutions
      - ${PAYMENTS_BASE_PATH_V1}/devolutions/:id
      - ${PAYMENTS_BASE_PATH_V1}/transactions
      - ${PAYMENTS_BASE_PATH_V1}/transactions/:id

serviceEndpoints:
  httpbin:
    url: 'https://httpbin.org'
  authorizerService:
    url: ${AUTHORIZER_URL}
  customerService:
    url: ${CUSTOMER_URL}
  employeeService:
    url: ${EMPLOYEE_URL}
  petService:
    url: ${PET_URL}
  servicesService:
    url: ${SERVICES_URL}
  paymentsService:
    url: ${PAYMENTS_URL}
policies:
  - log
  - proxy
  - jwt
  - request-transformer
  - jwt-validator
  - role-validator
  - endpoint-guard
pipelines:
  default:
    apiEndpoints:
      - api
    policies:
      - proxy:
          - action:
              serviceEndpoint: httpbin 
              changeOrigin: true
  
  # PUBLIC REGION
  publicAuthorizerPipeline:
    apiEndpoints:
      - publicAuthorizer
    policies:
      - proxy:
          - action:
              serviceEndpoint: authorizerService
              changeOrigin: true
  
  # PRIVATE REGION
  privateAuthorizerPipeline:
    apiEndpoints:
      - privateAuthorizer
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - jwt-validator:
      - role-validator:
          - action:
              roles: SuperAdmin,Employee
      - proxy:
          - action:
              serviceEndpoint: authorizerService
              changeOrigin: true
  privateCustomerPipeline:
    apiEndpoints:
      - privateCustomer
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - jwt-validator:
      - role-validator:
          - action:
              roles: SuperAdmin,Employee
      - proxy:
          - action:
              serviceEndpoint: customerService
              changeOrigin: true
  privateEmployeePipeline:
    apiEndpoints:
      - privateEmployee
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - jwt-validator:
      - role-validator:
          - action:
              roles: SuperAdmin
      - proxy:
          - action:
              serviceEndpoint: employeeService
              changeOrigin: true
  privatePetPipeline:
    apiEndpoints:
      - privatePet
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - jwt-validator:
      - role-validator:
          - action:
              roles: SuperAdmin,Employee
      - proxy:
          - action:
              serviceEndpoint: petService
              changeOrigin: true
  privateServicesPipeline:
    apiEndpoints:
      - privateServices
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - jwt-validator:
      - role-validator:
          - action:
              roles: SuperAdmin,Employee
      - proxy:
          - action:
              serviceEndpoint: servicesService
              changeOrigin: true
  privatePaymentsPipeline:
    apiEndpoints:
      - privatePayments
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - jwt-validator:
      - role-validator:
          - action:
              roles: SuperAdmin,Employee
      - proxy:
          - action:
              serviceEndpoint: paymentsService
              changeOrigin: true

  # INTERNAL REGION
  internalAuthorizerPipeline:
    apiEndpoints:
      - internalAuthorizer
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - jwt-validator:
      - proxy:
          - action:
              serviceEndpoint: authorizerService
              changeOrigin: true
  internalCustomerPipeline:
    apiEndpoints:
      - internalCustomer
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - jwt-validator:
      - proxy:
          - action:
              serviceEndpoint: customerService
              changeOrigin: true   
  internalEmployeePipeline:
    apiEndpoints:
      - internalEmployee
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - jwt-validator:
      - role-validator:
          - action:
              roles: SuperAdmin,Employee
      - proxy:
          - action:
              serviceEndpoint: employeeService
              changeOrigin: true
  internalpetPipeline:
    apiEndpoints:
      - internalPet
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - jwt-validator:
      - role-validator:
          - action:
              roles: SuperAdmin,Employee,Customer
      - endpoint-guard:
          - action:
              roles: Employee
              endpoints:
                - regex: \/pets\/classifications\/[^\n]+\/races$
                  methods: GET
                - regex: \/pets\/classifications
                  methods: GET
      - proxy:
          - action:
              serviceEndpoint: petService
              changeOrigin: true
  internalServicesPipeline:
    apiEndpoints:
      - internalServices
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - jwt-validator:
      - endpoint-guard:
          - action:
              roles: Customer
              endpoints:
                - regex: \/api\/services\/v1\/costs$
                  methods: GET
                - regex: \/api\/services\/v1\/costs\/[a-fA-F0-9]{24}$
                  methods: GET
      - proxy:
          - action:
              serviceEndpoint: servicesService
              changeOrigin: true
  internalPaymentsPipeline:
    apiEndpoints:
      - internalPayments
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - jwt-validator:
      - endpoint-guard:
          - action:
              roles: Customer
              endpoints:
                - regex: \/api\/payments\/v1\/methods$
                  methods: GET
                - regex: \/api\/payments\/v1\/methods\/[a-fA-F0-9]{24}$
                  methods: GET
      - proxy:
          - action:
              serviceEndpoint: paymentsService
              changeOrigin: true
