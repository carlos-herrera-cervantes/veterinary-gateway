http:
  port: ${HTTP_PORT}
admin:
  port: ${ADMIN_PORT}
  host: ${ADMIN_HOST}
apiEndpoints:
  api:
    host: ${API_HOST}
    paths: '/ip'

  # ALL REGION
  authorizer:
    host: ${INTERNAL_HOST}
    paths:
      - /authentication/sign-out

  customer:
    host: ${INTERNAL_HOST}
    paths:
      - /customers/profiles/me
      - /customers/address
      - /customers/address/me
      - /customers/avatars
      - /customers/avatars/me

  employee:
    host: ${INTERNAL_HOST}
    paths:
      - /employees/profiles/me
      - /employees/address
      - /employees/address/me
      - /employees/avatar
      - /employees/avatar/me
  
  # PUBLIC REGION
  publicAuthorizer:
    host: ${INTERNAL_HOST}
    paths:
      - /authentication/sign-in
      - /authentication/sign-up/customers

  # EMPLOYEE REGION
  employeeAuthorizer:
    host: ${INTERNAL_HOST}
    paths:
      - /authentication/sign-up/employees

  employeeCustomer:
    host: ${INTERNAL_HOST}
    paths:
      - /customers/profiles
      - /customers/profiles/:id

  employeePrivate:
    host: ${INTERNAL_HOST}
    paths:
      - /employees/profiles
      - /employees/profiles/:id
      - /employees/roles
      - /employees/roles/:id

serviceEndpoints:
  httpbin:
    url: 'https://httpbin.org'
  authorizerService:
    url: ${AUTHORIZER_URL}
  customerService:
    url: ${CUSTOMER_URL}
  employeeService:
    url: ${EMPLOYEE_URL}
policies:
  - log
  - proxy
  - jwt
  - request-transformer
  - jwt-validator
  - role-validator
pipelines:
  default:
    apiEndpoints:
      - api
    policies:
      - proxy:
          - action:
              serviceEndpoint: httpbin 
              changeOrigin: true
  
  # PUBLIC REGION
  publicAuthorizerPipeline:
    apiEndpoints:
      - publicAuthorizer
    policies:
      - proxy:
          - action:
              serviceEndpoint: authorizerService
              changeOrigin: true
  
  # EMPLOYEE REGION
  employeeAuthorizerPipeline:
    apiEndpoints:
      - employeeAuthorizer
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - role-validator:
          - action:
              roles: SuperAdmin,Employee
      - proxy:
          - action:
              serviceEndpoint: authorizerService
              changeOrigin: true
  employeeCustomerPipeline:
    apiEndpoints:
      - employeeCustomer
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - role-validator:
          - action:
              roles: SuperAdmin,Employee
      - proxy:
          - action:
              serviceEndpoint: customerService
              changeOrigin: true
  employeePrivatePipeline:
    apiEndpoints:
      - employeePrivate
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - role-validator:
          - action:
              roles: SuperAdmin
      - proxy:
          - action:
              serviceEndpoint: employeeService
              changeOrigin: true

  # ALL REGION
  authorizerPipeline:
    apiEndpoints:
      - authorizer
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - proxy:
          - action:
              serviceEndpoint: authorizerService
              changeOrigin: true
  customerPipeline:
    apiEndpoints:
      - customer
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - jwt-validator:
      - proxy:
          - action:
              serviceEndpoint: customerService
              changeOrigin: true   
  employeePipeline:
    apiEndpoints:
      - employee
    policies:
      - jwt:
          - action:
              secretOrPublicKey: ${SECRET_KEY}
              checkCredentialExistence: false
      - request-transformer:
          - action:
              headers:
                add:
                  user-id: req.user.nameid
          - action:
              headers:
                add:
                  user-email: req.user.email
          - action:
              headers:
                add:
                  user-roles: req.user.role
      - role-validator:
          - action:
              roles: SuperAdmin,Employee
      - proxy:
          - action:
              serviceEndpoint: employeeService
              changeOrigin: true
